# ASECN Development Roadmap

A structured plan for building ASECN in a linear flow. Each phase includes development goals, logic, and minimal tests.

---

## üü¢ Phase 0: System Primitives
**"Lay the core before the lore."**

### Goals
- Set up base configurations and constants.
- Establish logging and schema validation.
- Prepare `.env`, `manifest.json`, and `README.md`.

### Key Files
- `config.env`
- `/utilities/logger.js`, `schema-validator.js`, `time.js`
- `/manifest.json`, `/README.md`

---

## ‚öôÔ∏è Phase 1: Memory-Core
**"ASECN must remember to evolve."**

### Goals
- Implement core JSON memory with read/write/recall functionality.
- Support memory types: observation, trigger, action, upgrade.
- Enable timestamped logging.

### Key Files
- `memory-state.json`, `memory-log.json`
- `read.js`, `write.js`, `recall.js`, `purge.js`
- `index.js`

---

## ‚è±Ô∏è Phase 2: Perception Layer
**"ASECN sees first. Then reacts."**

### Goals
- Develop oracles to pull signals (e.g., time, price, custom).
- Configure triggers for polling and logging.
- Run perception on intervals (starting with `time-feed.js`).
- Pipe results to memory.

### Key Files
- `time-feed.js`, `trigger-config.json`, `trigger-log.json`
- `index.js`

---

## üö® Phase 3: Action Layer
**"From signal to motion."**

### Goals
- Define allowable actions (`allowed-actions.json`).
- Implement mock actions: `mint-nft.js`, `send-funds.js`.
- Log every action and its result.
- Trigger actions based on perception inputs.

### Key Files
- `actuators/*.js`
- `action-log.json`, `index.js`

---

## üå± Phase 4: Boot Task
**"Genesis ritual. ASECN awakens."**

### Goals
- Execute a one-time boot sequence.
- Log system birth, mint a genesis NFT, and write the first memory.
- Verify via `proof-log.json`.

### Key Files
- `birth-sequence.json`, `mint-genesis-nft.js`, `write-birth-memory.js`

---

## üí∞ Phase 5: Treasury / Vault
**"Survival and self-funding."**

### Goals
- Read/write treasury state.
- Implement mock income and expense logic.
- Create threshold-based triggers (e.g., auto-send if over cap).

### Key Files
- `vault.js`, `vault-config.json`, `balance-state.json`, `tx-history.json`
- `income-strategies/*.js`

---

## üß¨ Phase 6: Evolver
**"Thoughts to future selves."**

### Goals
- Propose upgrades via `proposal-engine.js`.
- Record proposals and executed upgrades.
- Implement a simple voting system (mock DAO).
- Integrate off-chain AI suggestion inputs.

### Key Files
- `proposal-engine.js`
- `decision-engine/`
- `executed-history.json`

---

## üåê Phase 7: Interfaces
**"Speak to the world."**

### Goals
- Develop a basic API for memory fetch and action triggers.
- Create a simple web dashboard for status monitoring.
- Implement a webhook listener for external inputs.

### Key Files
- `get-memory.js`, `trigger-action.js`
- `index.html`, `webhook-listener.js`

---

## üß™ Phase 8: Tests
**"Every layer verified."**

### Goals
- Test the memory-core, perception-layer, action-layer, and boot-sequence.
- Use Jest or Node's native test runner.

### Key Files
- `*.test.js` files for each major system.

---

## üóÇÔ∏è Summary Roadmap

| Phase | Name               | Goal                          | Status         |
|-------|--------------------|-------------------------------|----------------|
| 0     | System Primitives  | Configs, logging, schema      | üîú Next        |
| 1     | Memory-Core        | Internal memory system        | ‚úÖ Done (mostly)|
| 2     | Perception Layer   | Oracles + Triggers            | ‚è≥ Coming       |
| 3     | Action Layer       | Core output logic             | ‚è≥ Coming       |
| 4     | Boot Task          | First-time run rituals        | ‚è≥ Coming       |
| 5     | Treasury           | Vault, income/outflow         | ‚è≥ Coming       |
| 6     | Evolver            | Proposal + upgrade engine     | ‚è≥ Coming       |
| 7     | Interfaces         | Web + API + webhook           | ‚è≥ Coming       |
| 8     | Tests              | System-level testing          | ‚è≥ Coming       |

