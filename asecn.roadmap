🧠 ASECN Build Plan (Linear Flow)
Each phase includes dev goals, logic, and minimal tests.

🟢 Phase 0: System Primitives
“Lay the core before the lore.”

✅ Goals
Set base configs and constants

Establish logger and schema validation

Prepare .env, manifest.json, and README.md

📁 Files
config.env

/utilities/logger.js, schema-validator.js, time.js

/manifest.json, /README.md

⚙️ Phase 1: Memory-Core
“ASECN must remember to evolve.”

✅ Goals
Core JSON memory with read/write/recall

Support memory types: observation, trigger, action, upgrade

Timestamped logging

📁 Files
memory-state.json, memory-log.json

read.js, write.js, recall.js, purge.js

index.js

⏱️ Phase 2: Perception Layer
“ASECN sees first. Then reacts.”

✅ Goals
oracles/ pull signals: time, price, custom

triggers/ log + config for polling

Run perception on interval (start with time-feed.js)

Pipe results to memory

📁 Files
time-feed.js, trigger-config.json, trigger-log.json

index.js

🚨 Phase 3: Action Layer
“From signal to motion.”

✅ Goals
Define allowable actions (allowed-actions.json)

Implement mint-nft.js, send-funds.js (mock)

Log every action, result

Trigger from perception inputs

📁 Files
actuators/*.js

action-log.json, index.js

🌱 Phase 4: Boot Task
“Genesis ritual. ASECN awakens.”

✅ Goals
One-time boot sequence

Log birth, mint genesis NFT, write first memory

Check via proof-log.json

📁 Files
birth-sequence.json, mint-genesis-nft.js, write-birth-memory.js

💰 Phase 5: Treasury / Vault
“Survival and self-funding.”

✅ Goals
Read/write treasury state

Mock income + expense logic

Threshold-based triggers (e.g. auto-send if over cap)

📁 Files
vault.js, vault-config.json, balance-state.json, tx-history.json

income-strategies/*.js

🧬 Phase 6: Evolver
“Thoughts to future selves.”

✅ Goals
Propose upgrades via proposal-engine.js

Record proposals and executed ones

Simple voting system (mock DAO)

Offchain AI suggestion input

📁 Files
proposal-engine.js, decision-engine/, executed-history.json

🌐 Phase 7: Interfaces
“Speak to the world.”

✅ Goals
Basic API: memory fetch, trigger action

Web dashboard status (simple HTML + JS)

Webhook listener for external inputs

📁 Files
get-memory.js, trigger-action.js, index.html, webhook-listener.js

🧪 Phase 8: Tests
“Every layer verified.”

✅ Goals
Test memory-core, perception-layer, action-layer, boot-sequence

Use Jest or native Node test runner

📁 Files
*.test.js files for each major system

🗂️ Summary Roadmap

Phase	Name	Goal	Status
0	System Primitives	Configs, logging, schema	🔜 Next
1	Memory-Core	Internal memory system	✅ Done (mostly)
2	Perception Layer	Oracles + Triggers	⏳ Coming
3	Action Layer	Core output logic	⏳ Coming
4	Boot Task	First-time run rituals	⏳ Coming
5	Treasury	Vault, income/outflow	⏳ Coming
6	Evolver	Proposal + upgrade engine	⏳ Coming
7	Interfaces	Web + API + webhook	⏳ Coming
8	Tests	System-level testing	⏳ Coming
